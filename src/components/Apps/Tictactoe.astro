<section>
  <div class="board" id="board">
    <div class="cell" data-cell></div>
    <div class="cell" data-cell></div>
    <div class="cell" data-cell></div>
    <div class="cell" data-cell></div>
    <div class="cell" data-cell></div>
    <div class="cell" data-cell></div>
    <div class="cell" data-cell></div>
    <div class="cell" data-cell></div>
    <div class="cell" data-cell></div>
  </div>
  <div class="winning-message">
    <div data-winning-message-text>X Wins</div>
    <button id="restartButton">Restart</button>
  </div>
</section>

<style>
  *,
  *::after,
  *::before {
    box-sizing: border-box;
  }

  body {
    margin: 0;
    height: 100vh;
    font-family: "Exo 2", sans-serif;
  }

  :root {
    --cell-size: 100px;
    --mark-size: calc(var(--cell-size) * 0.9);
  }
  .board {
    width: 100vw;
    height: 100vh;
    display: grid;
    grid-template-columns: repeat(3, auto);
    justify-content: center;
    align-content: center;
    justify-items: center;
    align-items: center;
  }

  .cell {
    width: var(--cell-size);
    height: var(--cell-size);
    border: 2px solid #e8e8e8;
    border-radius: 2px;
    /* menangahkan X atau O */
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    /* biar menunjukkan bisa ditambah */
    cursor: pointer;
  }

  .cell:first-child,
  .cell:nth-child(2),
  .cell:nth-child(3) {
    border-top: none;
  }

  .cell:nth-child(3n + 1) {
    border-left: none;
  }

  .cell:nth-child(3n + 3) {
    border-right: none;
  }

  .cell:nth-child(7),
  .cell:nth-child(8),
  .cell:last-child {
    border-bottom: none;
  }

  .cell.x,
  .cell.circle {
    cursor: not-allowed;
  }

  .cell.x::before,
  .cell.x::after {
    background-color: #3899f3;
  }

  .board.x .cell:not(.x):not(.circle):hover::after,
  .board.x .cell:not(.x):not(.circle):hover::before {
    background-color: #dceeff;
  }

  .cell.x::before,
  .cell.x::after,
  .board.x .cell:not(.x):not(.circle):hover::after,
  .board.x .cell:not(.x):not(.circle):hover::before {
    content: "";
    position: absolute;
    height: var(--mark-size);
    width: calc(var(--mark-size) * 0.15);
    border-radius: 1rem;
  }
  .cell.x::after,
  .board.x .cell:not(.x):not(.circle):hover::after {
    transform: rotate(45deg);
  }

  .cell.x::before,
  .board.x .cell:not(.x):not(.circle):hover::before {
    transform: rotate(-45deg);
  }

  .cell.circle::before {
    background-color: #45d2eb;
  }

  .cell.circle::after {
    background-color: white;
  }

  .board.circle .cell:not(.circle):not(.x):hover::before {
    background-color: #cbf7ff;
  }
  .board.circle .cell:not(.circle):not(.x):hover::after {
    background-color: white;
  }

  .cell.circle::before,
  .cell.circle::after,
  .board.circle .cell:not(.circle):not(.x):hover::before,
  .board.circle .cell:not(.circle):not(.x):hover::after {
    content: "";
    position: absolute;
    border-radius: 100%;
  }

  .cell.circle::before,
  .board.circle .cell:not(.circle):not(.x):hover::before {
    height: var(--mark-size);
    width: var(--mark-size);
  }

  .cell.circle::after,
  .board.circle .cell:not(.circle):not(.x):hover::after {
    height: calc(var(--mark-size) * 0.7);
    width: calc(var(--mark-size) * 0.7);
  }

  .winning-message {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(57, 188, 212, 0.9);
    flex-direction: column;
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 4rem;
  }

  .winning-message button {
    margin: 65px;
    padding: 24px 57px;
    font-size: 1.2rem;
    font-family: sans-serif;
    font-weight: 600;
    color: rgba(57, 188, 212, 0.9);
    background-color: white;
    border: 2px solid rgba(219, 250, 255, 0.9);
    border-radius: 3rem;
    cursor: pointer;
  }
  .winning-message button:hover {
    background-color: rgba(10, 65, 73, 0.9);
    color: rgba(219, 250, 255, 0.9);
    border: 2px solid rgba(219, 250, 255, 0.9);
  }

  .winning-message.show {
    display: flex;
  }
</style>

<script>
  //Selector
  const X_CLASS = "x";
  const CIRCLE_CLASS = "circle";
  const WINNING_COMBINATION = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [1, 4, 8],
    [2, 4, 6],
  ];
  const cellElements = document.querySelectorAll("[data-cell]");
  const board = document.getElementById("board");
  const winningMessageElement = document.querySelector(".winning-message");
  const winningMessageTextElement = document.querySelector(
    "[data-winning-message-text]"
  );
  const restartButton = document.getElementById("restartButton");
  let circleTurn;

  //Event-Listener & Start Game // Untuk memunculkan diawal pertama kali

  startGame();
  restartButton.addEventListener("click", startGame);

  function startGame() {
    circleTurn = false;
    cellElements.forEach((cell) => {
      cell.classList.remove(X_CLASS); //untuk restart
      cell.classList.remove(CIRCLE_CLASS); //untuk restart
      cell.removeEventListener("click", handleClick); //untuk restart
      cell.addEventListener("click", handleClick, { once: true });
    });
    setBoardHoverClass();
    winningMessageElement.classList.remove("show"); //untuk restart
  }

  //Function

  function handleClick(e) {
    const cell = e.target; //apa yg kita click
    const currentClass = circleTurn ? CIRCLE_CLASS : X_CLASS; //turn yg sedang berlangsung

    //placeMark #1 //kasih tanda
    placeMark(cell, currentClass);

    //Check for Win or Draw #4
    if (checkWin(currentClass)) {
      endGame(false);
    } else if (isDraw()) {
      endGame(true);
    } else {
      //Switch Turn #2
      swapTurns();
      //Hover Before Click #3
      setBoardHoverClass();
    }
  }

  function placeMark(cell, currentClass) {
    cell.classList.add(currentClass);
  }

  function swapTurns() {
    circleTurn = !circleTurn;
  }

  function setBoardHoverClass() {
    board.classList.remove(X_CLASS);
    board.classList.remove(CIRCLE_CLASS);
    if (circleTurn) {
      board.classList.add(CIRCLE_CLASS);
    } else {
      board.classList.add(X_CLASS);
    }
  }

  function checkWin(currentClass) {
    return WINNING_COMBINATION.some((combination) => {
      //yg menang ada di beberapa diantara kombinasi yg tertera
      return combination.every((index) => {
        //dan di tiap kombinasi nya ada suatu index2 0/1/2 ....
        return cellElements[index].classList.contains(currentClass);
        //yaitu index yg berada di tiap CELL dan mempunyai class yg berada di giliran yg sedang dipakai X atau O
      });
    });
  }

  function isDraw() {
    return [...cellElements].every((cell) => {
      //jika tiap cell memimiliki cell yg mempunyai class X / Circle
      return (
        cell.classList.contains(X_CLASS) ||
        cell.classList.contains(CIRCLE_CLASS)
      );
    });
  }

  function endGame(draw) {
    if (draw) {
      winningMessageTextElement.innerText = "Draw";
    } else {
      winningMessageTextElement.innerText = `${
        circleTurn ? "O's" : "X's"
      } Wins!`;
    }
    winningMessageElement.classList.add("show");
  }
</script>
